// Note that the Serial.println have been commented to spare memory, uncomment them if testing with the IDE!

#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <SD.h>
#include <Adafruit_BMP085.h>
#include <LiquidCrystal_I2C.h>

// Constants
const int GPS_BAUD = 9600;
const int LED_CONFIRM_GPS_FIX = 9;
const int LED_SIGNAL_ERR = 8;

const int BUZZER = 5;  // Pin number for BUZZER

// LED for SD card declared in code in A3
const int LED_SD_ERR = A3;

const int LED_BARO = 4;  // Pin number for LED_BARO
const int LED_BARO_ABS = 6;
const int LED_BARO_MIN = 7;

const int interval = 30 * 1000;             // control the frequency at which the code logs the GPS and barometer data, in seconds
const int pressureVariationThreshold1 = 2;  // hPa
const int pressureVariationThreshold2 = 4;  // hPa
const int pressureThreshold = 1009;         // hPa

const int pressureVariationThreshold1Interval = 30 * 60 * 1000;   // Check if there is data recorded for at least the given interval of 30 minutes
const int pressureVariationThreshold2Interval = 120 * 60 * 1000;  // Check if there is data recorded for at least the given interval of 120 minutes

int prevPressure = 0;

unsigned long lastDataUpdate = 0;

// BMP085
Adafruit_BMP085 bmp;

// GPS
SoftwareSerial GPSSerial(2, 3);
TinyGPSPlus gps;

// LCD
LiquidCrystal_I2C lcd(0x3F, 16, 2);  // set the LCD address to 0x3F for a 16 chars and 2 line display

// Log files
File gpsFile;
File baroFile;

void setup() {

  // Set LED pins for GPS fix confirmation and signal error as outputs, as well as BUZZER and LED pins as outputs
  pinMode(LED_CONFIRM_GPS_FIX, OUTPUT);
  pinMode(LED_SIGNAL_ERR, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  pinMode(LED_BARO, OUTPUT);
  pinMode(LED_BARO_ABS, OUTPUT);
  pinMode(LED_BARO_MIN, OUTPUT);
  pinMode(LED_SD_ERR, OUTPUT);

  // Confirm that system is on
  digitalWrite(LED_SIGNAL_ERR, HIGH);
  digitalWrite(LED_CONFIRM_GPS_FIX, HIGH);
  analogWrite(LED_SD_ERR, 255);
  digitalWrite(LED_BARO, HIGH);
  digitalWrite(LED_BARO_ABS, HIGH);
  digitalWrite(LED_BARO_MIN, HIGH);

  delay(interval / 6);

  // Turn off LEDs and start checking the items
  digitalWrite(LED_SIGNAL_ERR, LOW);
  digitalWrite(LED_CONFIRM_GPS_FIX, LOW);
  analogWrite(LED_SD_ERR, 0);
  digitalWrite(LED_BARO, LOW);
  digitalWrite(LED_BARO_ABS, LOW);
  digitalWrite(LED_BARO_MIN, LOW);

  // Initialize serial communication for GPS
  Serial.begin(GPS_BAUD);
  GPSSerial.begin(GPS_BAUD);

  // Initialise LCD's number of columns and rows:
  lcd.init();
  lcd.clear();
  lcd.backlight();

  // Initialize BMP
  bmp.begin();
  while (!bmp.begin()) {
    digitalWrite(LED_BARO, HIGH);
  }

  // Initialize I2C communication for BMP085 barometer
  while (!bmp.begin(BMP085_STANDARD)) {
    digitalWrite(LED_BARO, HIGH);
  }

  // Check if SD card is initialized
  while (!SD.begin(10)) {  // Chip select of the sd card - MISO and MOSI are SPI and standard (see wiring), the CS goes on 10
    analogWrite(LED_SD_ERR, 255);
  }

  // Open the GPS log file for writing
  gpsFile = SD.open("Abigail_GPS_log.csv", FILE_WRITE);
  while (!gpsFile) {
    digitalWrite(LED_SIGNAL_ERR, HIGH);
    analogWrite(LED_SD_ERR, 255);
  }
  // Check if the headers already exist in the file
  if (gpsFile.size() == 0) {
    // Write headers for the GPS log file
    gpsFile.println(F("Date,Time,Latitude,Longitude"));
  }

  // Open the barometer log file for writing
  baroFile = SD.open("Abigail_BARO_log.csv", FILE_WRITE);
  while (!baroFile) {
    digitalWrite(LED_BARO, HIGH);
    analogWrite(LED_SD_ERR, 255);
  }
  // Check if the headers already exist in the file
  if (baroFile.size() == 0) {
    // Write headers for the barometer log file
    baroFile.println("Date,Time,Pressure (hPa)");
  }

  // Get the GPS Fix
  while (!gps.location.isValid()) {
    digitalWrite(LED_CONFIRM_GPS_FIX, HIGH);
    digitalWrite(LED_SIGNAL_ERR, HIGH);
    lcd.println("Waiting for GPS fix");
  }

  lcd.clear();

  // Turn off the signal error LED
  digitalWrite(LED_SIGNAL_ERR, LOW);
  digitalWrite(LED_CONFIRM_GPS_FIX, LOW);
  analogWrite(LED_SD_ERR, 0);
  digitalWrite(LED_BARO, LOW);
  digitalWrite(LED_BARO_ABS, LOW);
  digitalWrite(LED_BARO_MIN, LOW);

  // Share that the initialisation is complete
  lcd.println("Initialisation complete");

  // This will disappear as soon as I have the LCD
  digitalWrite(LED_SIGNAL_ERR, HIGH);
  digitalWrite(LED_CONFIRM_GPS_FIX, HIGH);
  analogWrite(LED_SD_ERR, 255);
  digitalWrite(LED_BARO, HIGH);
  digitalWrite(LED_BARO_ABS, HIGH);
  digitalWrite(LED_BARO_MIN, HIGH);

  delay(interval / 5);

  // This will disappear as soon as I have the LCD
  digitalWrite(LED_SIGNAL_ERR, LOW);
  digitalWrite(LED_CONFIRM_GPS_FIX, LOW);
  analogWrite(LED_SD_ERR, 0);
  digitalWrite(LED_BARO, LOW);
  digitalWrite(LED_BARO_ABS, LOW);
  digitalWrite(LED_BARO_MIN, LOW);

  // clear the LCD
  lcd.clear();
}




void loop() {

  // define the time at which the circus begins
  int loop_time = millis();

  /*
    Checking if there is any data available to be read from the GPS module, and if there is, it is being passed to the gps.encode() function
    The gps.encode() function is decoding the data from the GPS module into a usable format
  */

  while (GPSSerial.available() > 0) {
    gps.encode(GPSSerial.read());
  }

  // Get pressure value from BMP085 barometer
  int pressure = bmp.readPressure();

  // Check if there is data recorded for at least the given interval
  if (loop_time - lastDataUpdate >= pressureVariationThreshold1Interval) {
    // Check if the absolute variation between the current pressure and the pressure recorded 30 minutes before is greater than the given threshold of 2 hPa
    int pressureVariation = abs(pressure - prevPressure);
    if (pressureVariation >= pressureVariationThreshold1) {
      // Turn on LED_BARO_ABS and BUZZER
      digitalWrite(LED_BARO_ABS, HIGH);
      digitalWrite(BUZZER, HIGH);
    }
  } else {
    // Turn off LED_BARO_ABS and BUZZER
    digitalWrite(LED_BARO_ABS, LOW);
    digitalWrite(BUZZER, LOW);
  }

  // Check if there is data recorded for at least the given interval of 120 minutes
  if (loop_time - lastDataUpdate >= pressureVariationThreshold2Interval) {
    // Check if the pressure decreased by 4 hPa or more in the last 120 minutes
    int pressureVariation = pressure - prevPressure;
    if (pressureVariation <= -pressureVariationThreshold2) {
      // Turn on LED_BARO_MIN and BUZZER
      digitalWrite(LED_BARO_MIN, HIGH);
      digitalWrite(BUZZER, HIGH);
    } else {
      // Turn off LED_BARO_MIN and BUZZER
      digitalWrite(LED_BARO_MIN, LOW);
      digitalWrite(BUZZER, LOW);
    }
  }
  // Store the current pressure for comparison in the next loop iteration
  prevPressure = pressure;

  // Manage GPS data
  // Check if the GPS module has a valid location
  // If not valid, do not proceed with logging the GPS data
  if (gps.location.isValid()) {
    // If valid, turn on the LED to indicate GPS fix
    digitalWrite(LED_CONFIRM_GPS_FIX, HIGH);

    // write to LCD
    lcd.setCursor(0, 0);
    lcd.print("Lat " + String(gps.location.lat(), 6));
    lcd.setCursor(0, 1);
    lcd.print("Lon " + String(gps.location.lng(), 6));

    // Check if the interval since the last data update has passed
    if (loop_time - lastDataUpdate > interval) {
      // Update the time of the last data update
      lastDataUpdate = millis();
      // Write the GPS data to the file
      if (gpsFile.println(String(gps.date.value()) + "," + String(gps.time.value()) + "," + String(gps.location.lat(), 6) + "," + String(gps.location.lng(), 6))) {
        // If the write was successful, turn off the error LED
        digitalWrite(LED_SIGNAL_ERR, LOW);
      } else {
        // If the write was unsuccessful, turn on the error LED and print an error message
        digitalWrite(LED_SIGNAL_ERR, HIGH);
      }
    }
  } else {
    digitalWrite(LED_CONFIRM_GPS_FIX, LOW);
  }

  // Manage BARO data (excluded from the GPS section at it requires only)
  if (gps.time.isValid() && gps.date.isValid()) {
    // Check if the interval since the last data update has passed
    if (loop_time - lastDataUpdate > interval) {
      // Write the BARO data to the file
      if (baroFile.println(String(gps.date.value()) + "," + String(gps.time.value()) + "," + String(bmp.readPressure()))) {
        // If the write was successful, turn off the error LED
        digitalWrite(LED_BARO, LOW);
      } else {
        // If the write was unsuccessful, turn on the  LED and print an error message
        digitalWrite(LED_BARO, HIGH);
      }
    }

    lastDataUpdate = millis();
    delay(interval / 30);
  }
}
