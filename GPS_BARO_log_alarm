#include <SD.h>
#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <Adafruit_BMP085.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// SD card --> CS in 10, MOSI e MISO e SCK in standard 11,12, e 13
const int CHIP_SELECT = 10;

// Modulo GPS (il pin TX va in 0, RX in 1 - o modifiche sotto, ora li sposto ad es a 6 e 7, consiglio partire da 0 e 1 e spostare e aggiornare la formula sotto per evitare canne - il default sarebbe 0,1)
const int RXPin = 6, TXPin = 7;
const int GPS_BAUD = 9600;
SoftwareSerial GPSSerial(RXPin, TXPin);
TinyGPSPlus GPS;

// BMP180 (CL in A5, DA in A4)
Adafruit_BMP085 bmp;

// LED vari
const int LED_SD_ERR = 2;
const int LED_CONFIRM_GPS_FIX = 3;
const int LED_SIGNAL_ERR = 4;
const int LED_BARO_ERR = 5;
const int LED_BARO_WARNING = 8;

// File
File posLog;
File barLog;

// Intervallo di registrazione dei dati
const int intervalData = 15 * 1000, intervalLCD = 1 * 1000;
int dataLog_time = 0;
int LCDprint_time = 0;

// Variabili per l'analisi della pressione
const int pressureVariationThreshold1 = 2;  // hPa
const int pressureVariationThreshold2 = 4;  // hPa
const int pressureThreshold = 1009;         // hPa

const int pressureVariationThreshold1Interval = 30 * 60 * 1000;   // Check if there is data recorded for at least the given interval of 30 minutes
const int pressureVariationThreshold2Interval = 120 * 60 * 1000;  // Check if there is data recorded for at least the given interval of 120 minutes

unsigned long lastDataUpdate_1 = 0;
unsigned long lastDataUpdate_2 = 0;

unsigned long histPressureThreshold1 = 0;
unsigned long histPressureThreshold2 = 0;


// Set the LCD address and number of columns and rows
LiquidCrystal_I2C lcd(0x27, 16, 2);
String currentMessage = "";

void setup() {

  // Initialize the LCD display
  lcd.init();
  lcd.backlight();

  /*  // Turn on the backlight
    lcd.backlight();*/

  // Print "Setting up" during setup
  printOnLCD("Setting up");

  // LED initialisation
  pinMode(LED_SD_ERR, OUTPUT);
  pinMode(LED_CONFIRM_GPS_FIX, OUTPUT);
  pinMode(LED_SIGNAL_ERR, OUTPUT);
  pinMode(LED_BARO_ERR, OUTPUT);
  pinMode(LED_BARO_WARNING, OUTPUT);

  // Begin of initialisation
  digitalWrite(LED_SD_ERR, HIGH);
  digitalWrite(LED_CONFIRM_GPS_FIX, HIGH);
  digitalWrite(LED_SIGNAL_ERR, HIGH);
  digitalWrite(LED_BARO_ERR, HIGH);
  digitalWrite(LED_BARO_WARNING, HIGH);

  delay(3000);

  digitalWrite(LED_SD_ERR, LOW);
  digitalWrite(LED_CONFIRM_GPS_FIX, LOW);
  digitalWrite(LED_SIGNAL_ERR, LOW);
  digitalWrite(LED_BARO_ERR, LOW);
  digitalWrite(LED_BARO_WARNING, LOW);

  // Initialise GPS module
  Serial.begin(GPS_BAUD);
  GPSSerial.begin(GPS_BAUD);

  // Initialize SD card
  pinMode(CHIP_SELECT, OUTPUT);
  while (!SD.begin(CHIP_SELECT)) {
    digitalWrite(LED_SD_ERR, HIGH);
  }
  digitalWrite(LED_SD_ERR, LOW);

  // Initialize BMP
  bmp.begin();
  while (!bmp.begin()) {
    digitalWrite(LED_BARO_ERR, HIGH);
  }
  digitalWrite(LED_BARO_ERR, LOW);

  histPressureThreshold1 = bmp.readPressure();
  histPressureThreshold2 = bmp.readPressure();

  // Open GPS data file
  posLog = SD.open("posLog.csv", FILE_WRITE);
  while (!posLog) {
    digitalWrite(LED_SD_ERR, HIGH);
    digitalWrite(LED_SIGNAL_ERR, HIGH);
  }
  digitalWrite(LED_SD_ERR, LOW);
  digitalWrite(LED_SIGNAL_ERR, LOW);

  // Write headers to file if necessary
  if (posLog.size() == 0) {
    posLog.println("Date,Time,Latitude,Longitude");
  }
  posLog.close();

  // Open BARO data file
  barLog = SD.open("barLog.csv", FILE_WRITE);
  while (!barLog) {
    digitalWrite(LED_SD_ERR, HIGH);
    digitalWrite(LED_BARO_ERR, HIGH);
  }
  digitalWrite(LED_SD_ERR, LOW);
  digitalWrite(LED_BARO_ERR, LOW);

  // Write headers to file if necessary
  if (barLog.size() == 0) {
    barLog.println("Date,Time,Pressure");
  }
  barLog.close();

  lcd.clear();
  printFirstRow("Initialisation");
  printSecondRow("complete!");

  // End of process
  digitalWrite(LED_SD_ERR, HIGH);
  delay(500);
  digitalWrite(LED_CONFIRM_GPS_FIX, HIGH);
  delay(500);
  digitalWrite(LED_SIGNAL_ERR, HIGH);
  delay(500);
  digitalWrite(LED_BARO_ERR, HIGH);
  delay(500);
  digitalWrite(LED_BARO_WARNING, HIGH);

  // Keep all LEDs on for 3 seconds
  delay(3000);

  // Turn off all LEDs
  digitalWrite(LED_SD_ERR, LOW);
  digitalWrite(LED_CONFIRM_GPS_FIX, LOW);
  digitalWrite(LED_SIGNAL_ERR, LOW);
  digitalWrite(LED_BARO_ERR, LOW);
  digitalWrite(LED_BARO_WARNING, LOW);

  lcd.clear();
}

void loop() {
// some local variables
  bool gpsFix = false;

  // update the time at which the circus begins
  int loop_time = millis();

  // check if enough time has passed to either print on LCD or log data

  int proceed_dataLog = 0;
  int proceed_LCDprint = 0;

  if (loop_time >= dataLog_time + intervalData) {
    proceed_dataLog = 1;
    dataLog_time = loop_time;
  }

  if (loop_time >= LCDprint_time + intervalLCD) {
    proceed_LCDprint = 1;
    LCDprint_time = loop_time;
  }

  // Check if GPS fix is acquired
  while (GPSSerial.available() > 0) {
    GPS.encode(GPSSerial.read());
  }

  if (GPS.location.isValid()) {
    gpsFix = true;
    digitalWrite(LED_CONFIRM_GPS_FIX, HIGH);

    // LogData if time requirement is met
    if (proceed_dataLog == 1) {

      // Open the GPS file
      posLog = SD.open("posLog.csv", FILE_WRITE);
      while (!posLog) {
        digitalWrite(LED_SD_ERR, HIGH);
        digitalWrite(LED_SIGNAL_ERR, HIGH);
      }
      digitalWrite(LED_SD_ERR, LOW);
      digitalWrite(LED_SIGNAL_ERR, LOW);

      // Write the GPS data to the file
      if (posLog.println(String(GPS.date.value()) + "," + String(GPS.time.value()) + "," + String(GPS.location.lat(), 6) + "," + String(GPS.location.lng(), 6))) {
        // If the write was successful, turn off the error LED
        digitalWrite(LED_SD_ERR, LOW);
        digitalWrite(LED_SIGNAL_ERR, LOW);
      } else {
        // If the write was unsuccessful, turn on the error LED
        digitalWrite(LED_SD_ERR, HIGH);
        digitalWrite(LED_SIGNAL_ERR, HIGH);
      }
      posLog.close();

      // Get pressure value from BMP085 barometer
      int pressure = bmp.readPressure();

      // Write BARO data to file
      barLog = SD.open("barLog.csv", FILE_WRITE);
      while (!barLog) {
        digitalWrite(LED_SD_ERR, HIGH);
        digitalWrite(LED_BARO_ERR, HIGH);
      }
      digitalWrite(LED_SD_ERR, LOW);
      digitalWrite(LED_BARO_ERR, LOW);

      if (barLog.println(String(GPS.date.value()) + "," + String(GPS.time.value()) + "," + String(bmp.readPressure()))) {
        // If the write was successful, turn off the error LED
        digitalWrite(LED_SD_ERR, LOW);
        digitalWrite(LED_BARO_ERR, LOW);
      } else {
        // If the write was unsuccessful, turn on the LED
        digitalWrite(LED_SD_ERR, HIGH);
        digitalWrite(LED_BARO_ERR, HIGH);
      }

      // analisi della variazione di pressione
      // check if enough time has passed

      bool Threshold1test = false;
      bool Threshold2test = false;

      // check if enough time has passed
      if (loop_time - lastDataUpdate_1 >= pressureVariationThreshold1Interval) {
        histPressureThreshold1 = bmp.readPressure();
        lastDataUpdate_1 = loop_time;
        Threshold1test = true;
      }

      // check the delta
      if (Threshold1test) {
        // Check if the absolute variation between the current pressure and the pressure recorded 30 minutes before is greater than the given threshold of 2 hPa
        int pressureVariation = abs(pressure - histPressureThreshold1);
        if (pressureVariation >= pressureVariationThreshold1) {
          digitalWrite(LED_BARO_WARNING, HIGH);
        } else {
          digitalWrite(LED_BARO_WARNING, LOW);
        }
      }

      // check if enough time has passed
      if (loop_time - lastDataUpdate_2 >= pressureVariationThreshold2Interval) {
        histPressureThreshold2 = bmp.readPressure();
        lastDataUpdate_2 = loop_time;
        Threshold2test = true;
      }

      // Check if there is data recorded for at least the given interval of 120 minutes
      if (Threshold2test) {
        int pressureVariation = pressure - histPressureThreshold2;
        if (pressureVariation <= -pressureVariationThreshold2) {
          digitalWrite(LED_BARO_WARNING, HIGH);
        } else {
          digitalWrite(LED_BARO_WARNING, LOW);
        }
      }
      barLog.close();
    }

    // check if data has passed to print LCD data (to be written at a later stage)
    if (proceed_LCDprint == 1) {

      // Print latitude and longitude if there is a GPS fix and the time to update has come

      float latitude = GPS.location.lat();
      float longitude = GPS.location.lng();

      int latDegrees = abs(latitude);
      int latMinutes = (abs(latitude) - latDegrees) * 60;
      //   float latSeconds = ((abs(latitude) - latDegrees) * 60 - latMinutes) * 60;  // Calculate the number of seconds
      char latDirection = (latitude > 0) ? 'N' : 'S';

      int longDegrees = abs(longitude);
      int longMinutes = (abs(longitude) - longDegrees) * 60;
      // float longSeconds = ((abs(longitude) - longDegrees) * 60 - longMinutes) * 60;  // Calculate the number of seconds
      char longDirection = (longitude > 0) ? 'E' : 'W';


      lcd.clear();

      // printFirstRow(String(latDegrees) + "deg " + String(latMinutes) + "'" + String(latSeconds, 3) + "\"" + latDirection);
      // printSecondRow(String(longDegrees) + "deg " + String(longMinutes) + "'" + String(longSeconds, 3) + "\"" + longDirection);

      printFirstRow(String(latDegrees) + "deg " + String(latMinutes) + "\"" + latDirection);
      printSecondRow(String(longDegrees) + "deg " + String(longMinutes) + "\"" + longDirection);
    }

  } else {
    digitalWrite(LED_CONFIRM_GPS_FIX, LOW);
    gpsFix = false;
  }

  String message = "";
  if (gpsFix == false) {
    message = "No GPS fix";
  }
  if (message != currentMessage) {
    currentMessage = message;
    lcd.clear();
    if (currentMessage != "") {
      printOnLCD(currentMessage);
    }
  }
}

void printFirstRow(String str) {  // the LCD with I2C doesn't work well so we need this crap
  lcd.setCursor(0, 0);
  for (int i = 0; i < str.length(); i++) {
    lcd.print(str.charAt(i));
  }
}

void printSecondRow(String str) {  // the LCD with I2C doesn't work well so we need this crap
  lcd.setCursor(0, 1);
  for (int i = 0; i < str.length(); i++) {
    lcd.print(str.charAt(i));
  }
}

void printOnLCD(String str) {
  int row = 0;
  int col = 0;
  for (int i = 0; i < str.length(); i++) {
    if (col >= 16) {
      row++;
      col = 0;
    }
    if (row >= 2) {
      break;
    }
    lcd.setCursor(col, row);
    lcd.print(str.charAt(i));
    col++;
  }
}
